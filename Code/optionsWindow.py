# Form implementation generated from reading ui file 'options.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtWidgets, QtGui
from PyQt6.QtCore import Qt


#from PyQt6.uic.properties import QtGui


class Ui_optionsWindow(object):
    def setupUi(self, optionsWindow):
        optionsWindow.setObjectName("optionsWindow")
        optionsWindow.resize(400, 600)

        # Create the label
        label = QtWidgets.QLabel("Selecciona una Opción: ", optionsWindow)
        label.setGeometry(50, 50, 300, 30)
        # Style for Label
        font = QtGui.QFont("Arial", 20)  # Create a QFont object
        font.setBold(True)  # Set the font weight to bold
        label.setFont(font)  # Apply the font to the label

        # Create the checkbox for Bisection Method
        checkboxBisecc = QtWidgets.QCheckBox("Método de Bisección", optionsWindow)
        checkboxBisecc.setGeometry(120, 200, 200, 20)
        checkboxBisecc.setFont(QtGui.QFont("Arial", 10))

        # Create the checkbox for Secant Method
        checkboxSecant = QtWidgets.QCheckBox("Método de Secante", optionsWindow)
        checkboxSecant.setGeometry(120, 230, 200, 20)

        # Create the checkbox for Gauss-Jordan Method
        checkboxGJ = QtWidgets.QCheckBox("Método Gauss-Jordan", optionsWindow)
        checkboxGJ.setGeometry(120, 260, 200, 20)

        # Create the checkbox for Gauss-Seidel Method
        checkboxGS = QtWidgets.QCheckBox("Método Gauss-Seidel", optionsWindow)
        checkboxGS.setGeometry(120, 290, 200, 20)

        #Create Continue button for this window
        continue_button = QtWidgets.QPushButton("Continuar", optionsWindow)
        continue_button.setGeometry(250, 500, 100, 30)

        # Connect the checkbox's stateChanged signal to a handler
        #checkboxBisecc.stateChanged.connect(self.on_checkbox_stateChanged)

"""
    def on_checkbox_stateChanged(self, state):
        # Handle the checkbox state change
        if state == Qt.Checked:
            print("Checkbox is checked")
        else:
            print("Checkbox is unchecked")
"""


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    optionsWindow = QtWidgets.QMainWindow()
    ui = Ui_optionsWindow()
    ui.setupUi(optionsWindow)

    optionsWindow.show()
    sys.exit(app.exec())
